AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Deploys webpresence GeoCore solutions

Parameters:
  Environment:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/environment
    Description: SSM parameter name for environment
  CreateDynamoDb:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/dynamodb_creation
    Description: Parameter Store value to determine if DynamoDB tables need to be created
  DeploymentBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/deployment-bucket
    Description: S3 bucket where all deployment files are stored
  SslCertArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /webpresence/geocore/ssl-cert-arn
    Description: SSM parameter name for GeoCore ACM SSL Cert ARN   
  WebAclArn:
    Type: String
    Description: ARN of the WAF web ACL to use for CloudFront
  SecHeadersLambdaEdgeArn:
    Type: String
    Description: ARN of the Lambda@Edge function for injecting security headers to CloudFront
  OSDomain:
    Type: String
    Description: Open Search Domain Endpoint


Conditions: 
  IsProd: !Equals [prod, !Ref Environment]
  IsStage: !Equals [stage, !Ref Environment]
  IsDev: !Equals [dev, !Ref Environment]
  CreateDynamoDb: !Equals [true, !Ref CreateDynamoDb]

Resources:

  AthenaDynamodbSpillBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'webpresence-geocore-athena-dynamodb-spill-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      AccessControl: Private

  AthenaDynamoDBConnector:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:292517598671:applications/AthenaDynamoDBConnector
        SemanticVersion: 2021.41.1
      Parameters: 
        AthenaCatalogName: dynamodb-analytics
        SpillBucket: !Ref AthenaDynamodbSpillBucket

  AthenaDynamodbAnalyticsCatalog:
    Type: AWS::Athena::DataCatalog
    DependsOn: AthenaDynamoDBConnector
    Properties: 
      Name: dynamodb-analytics
      Parameters: 
        function: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dynamodb-analytics
      Type: LAMBDA

  GeoCoreAthenaOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'webpresence-geocore-athena-output-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      AccessControl: Private

  DynamoDb:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: tag
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: tag
          AttributeType: S
        - 
          AttributeName: uuid
          AttributeType: S      
      KeySchema: 
        - 
          AttributeName: tag
          KeyType: HASH
        - 
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbFoundational:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: foundational
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: tag
          AttributeType: S
        - 
          AttributeName: uuid
          AttributeType: S      
      KeySchema: 
        - 
          AttributeName: tag
          KeyType: HASH
        - 
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbTheme:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: theme
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: tag
          AttributeType: S
        - 
          AttributeName: uuid
          AttributeType: S      
      KeySchema: 
        - 
          AttributeName: tag
          KeyType: HASH
        - 
          AttributeName: uuid
          KeyType: RANGE

  DynamoDbAnalytics:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: analytics
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: key
          AttributeType: S
  
      KeySchema: 
        - 
          AttributeName: key
          KeyType: HASH

  DynamoDbAnnouncements:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: announcements
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: datetime
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: datetime
            KeyType: RANGE
  
  DynamoDbCommunity:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: community
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S  
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH

  DynamoDbCommunityannouncement:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: community_announcement
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: datetime
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: datetime
            KeyType: RANGE

  DynamoDbCommunitydata:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: community_data
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: communityId
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: communityId
            KeyType: RANGE

  DynamoDbCommunityresource:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: community_resource
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: communityId
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: communityId
            KeyType: RANGE     

  DynamoDbCommunityroles:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: community_roles
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: communityId
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: communityId
            KeyType: RANGE 

  DynamoDbSavedrecords:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: saved_records
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: userId
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: userId
            KeyType: RANGE

  DynamoDbSavedsearches:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties:
        TableName: saved_searches
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: key
            AttributeType: S
          - 
            AttributeName: userId
            AttributeType: S      
        KeySchema: 
          - 
            AttributeName: key
            KeyType: HASH
          - 
            AttributeName: userId
            KeyType: RANGE

  DynamoDbUsers:
      Type: AWS::DynamoDB::Table
      Condition: CreateDynamoDb
      Properties: 
        TableName: users
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification: 
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions: 
          - 
            AttributeName: userId
            AttributeType: S 
        KeySchema: 
          - 
            AttributeName: userId
            KeyType: HASH

  DynamoDbPopularity:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: analytics_popularity
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: uuid
          AttributeType: S
        - 
          AttributeName: popularity
          AttributeType: N
      KeySchema: 
        - 
          AttributeName: uuid
          KeyType: HASH
        - 
          AttributeName: popularity
          KeyType: RANGE

  DynamoDbGeoviewConfigService:
    Type: AWS::DynamoDB::Table
    Condition: CreateDynamoDb
    Properties: 
      TableName: geoview_config_service
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification: 
         PointInTimeRecoveryEnabled: true
      AttributeDefinitions: 
        - 
          AttributeName: uuid
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: uuid
          KeyType: HASH

  GeoCoreDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: geocore_metadata

  GeoCoreTableQuery:
    Type: AWS::Athena::NamedQuery
    Properties: 
      Database: !Ref GeoCoreDatabase
      WorkGroup: !Ref GeoCoreAthenaWorkGroup
      QueryString:
        !Sub "CREATE EXTERNAL TABLE `metadata`(
          `features_type` string, 
          `features_geometry_type` string, 
          `features_geometry_coordinates` string, 
          `features_properties_id` string, 
          `features_properties_title_en` string, 
          `features_properties_title_fr` string, 
          `features_properties_description_en` string, 
          `features_properties_description_fr` string, 
          `features_properties_keywords_en` string, 
          `features_properties_keywords_fr` string, 
          `features_properties_topiccategory` string, 
          `features_properties_date_published_text` string, 
          `features_properties_date_published_date` string, 
          `features_properties_date_created_text` string, 
          `features_properties_date_created_date` string, 
          `features_properties_date_revision_text` string, 
          `features_properties_date_revision_date` string, 
          `features_properties_date_notavailable_text` string, 
          `features_properties_date_notavailable_date` string, 
          `features_properties_date_inforce_text` string, 
          `features_properties_date_inforce_date` string, 
          `features_properties_date_adopted_text` string, 
          `features_properties_date_adopted_date` string, 
          `features_properties_date_deprecated_text` string, 
          `features_properties_date_deprecated_date` string, 
          `features_properties_date_superceded_text` string, 
          `features_properties_date_superceded_date` string, 
          `features_properties_spatialrepresentation` string, 
          `features_properties_type` string, 
          `features_properties_geometry` string, 
          `features_properties_temporalextent_begin` string, 
          `features_properties_temporalextent_end` string, 
          `features_properties_refsys` string, 
          `features_properties_refsys_version` string, 
          `features_properties_status` string, 
          `features_properties_maintenance` string, 
          `features_properties_metadatastandard_en` string, 
          `features_properties_metadatastandard_fr` string, 
          `features_properties_metadatastandardversion` string, 
          `features_properties_graphicoverview` string, 
          `features_properties_distributionformat_name` string, 
          `features_properties_distributionformat_format` string, 
          `features_properties_uselimits_en` string, 
          `features_properties_uselimits_fr` string, 
          `features_properties_accessconstraints` string, 
          `features_properties_otherconstraints_en` string, 
          `features_properties_otherconstraints_fr` string, 
          `features_properties_datestamp` string, 
          `features_properties_dataseturi` string, 
          `features_properties_locale_language` string, 
          `features_properties_locale_country` string, 
          `features_properties_locale_encoding` string, 
          `features_properties_language` string, 
          `features_properties_characterset` string, 
          `features_properties_environmentdescription` string, 
          `features_properties_supplementalinformation_en` string, 
          `features_properties_supplementalinformation_fr` string, 
          `features_properties_contact` string, 
          `features_properties_credits` string, 
          `features_properties_cited` string, 
          `features_properties_distributor` string, 
          `features_properties_options` string, 
          `features_properties_plugins` string, 
          `features_properties_sourcesystemname` string, 
          `features_popularity` int,
          `features_properties_eocollection` string,
          `features_properties_eofilters` string)
          ROW FORMAT SERDE 
            'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' 
          STORED AS INPUTFORMAT 
            'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' 
          OUTPUTFORMAT 
            'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'
          LOCATION
            's3://webpresence-geocore-geojson-to-parquet-${Environment}/'
          TBLPROPERTIES (
            'classification'='parquet', 
            'compressionType'='none', 
            'last_modified_by'='hadoop', 
            'last_modified_time'='1636512328', 
            'numFiles'='1', 
            'numRows'='-1', 
            'rawDataSize'='-1', 
            'totalSize'='6676041', 
            'transient_lastDdlTime'='1647981845', 
            'typeOfData'='file');

        -- To add a new column(s) update below and run each manually. This named query is for documentation purpose only.

        ALTER EXTERNAL TABLE `metadata`
        ADD COLUMN `features_popularity` int;
        
        ALTER EXTERNAL TABLE `metadata`
        ADD COLUMN `features_properties_eocollection` string;
        
        ALTER EXTERNAL TABLE `metadata`
        ADD COLUMN `features_properties_eofilters` string;
        "
        
  GeoCoreAthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties: 
      Name: GeoCore
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub 's3://${GeoCoreAthenaOutputBucket}'

#  LambdaProcessIndex:
#    Type: AWS::Serverless::Function
#    Properties:
#      Runtime: python3.8
#      # AutoPublishAlias: live
#      CodeUri:
#        Bucket: !Ref DeploymentBucket
#        Key:
#          Fn::If:
#            - IsProd
#            - cloudformation-templates/lambda/search-repo/add-to-os.zip
#            - Fn::If:
#              - IsStage
#              - cloudformation-templates/lambda/search-repo/add-to-os.zip
#              - cloudformation-templates/lambda/search-repo/add-to-os.zip
#      Handler: index.handler
#      Role: !GetAtt LambdaExecutionRole.Arn
#      MemorySize: 512
#      Timeout: 60
#      Environment:
#        Variables:
#          #ES_HOST:
#          #  !Ref OSdomain
#          #ES_INDEX:
#          #  !Ref search
#          API_KEY:
#            !Ref RestApiKey
#          API:
#            !Ref RestApi    
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            RestApiId: !Ref RestApi
#            Path: /*
#            Method: any
  
#  LambdaResourceIndex:
#    Type: AWS::Serverless::Function
#    Properties:
#      Runtime: nodejs16.x
#      # AutoPublishAlias: live
#      CodeUri:
#        Bucket: !Ref DeploymentBucket
#        Key:
#          Fn::If:
#            - IsProd
#            - cloudformation-templates/lambda/search-repo/resource-parser.zip
#            - Fn::If:
#              - IsStage
#              - cloudformation-templates/lambda/search-repo/resource-parser.zip
#              - cloudformation-templates/lambda/search-repo/resource-parser.zip
#      Handler: index.handler
#      Role: !GetAtt LambdaExecutionRole.Arn
#      MemorySize: 512
#      Timeout: 60
#      Environment:
#        Variables:
#          bucket: !Sub 's3-documentparser-documents-${Environment}'
#      Events:
#        ApiEvent:
#          Type: Api
#          Properties:
#            RestApiId: !Ref RestApi
#            Path: /*
#            Method: any

  LambdaId:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/id/id-20240612-1600.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/id/id-20240612-1600.zip
              - cloudformation-templates/lambda/id/id-20240612-1600.zip
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 3009
      Timeout: 60
      Environment:
        Variables:
          CACHE_EXPIRY_IN_DAYS: '2'
          PARQUET_BUCKET_NAME: !Sub 's3://webpresence-geocore-geojson-to-parquet-${Environment}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
      Layers:
        - arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python39:8

  LambdaIdV1:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/id/idv1-20230926-1100.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/id/idv1-20230926-1100.zip
              - cloudformation-templates/lambda/id/idv1-20230926-1100.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  KeepLambdaIdWarmScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: KeepLambdaIdWarm
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - LambdaId
              - Arn
          Id: TargetFunctionV1
  
  PermissionToInvokeLambdaId:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref LambdaId
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 
        - KeepLambdaIdWarmScheduleRule
        - Arn

  LambdaGeo:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/geo/geo-20240627-2300.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/geo/geo-20240627-2300.zip
              - cloudformation-templates/lambda/geo/geocore-LambdaGeo-20240315.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaFeatured:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/featured/featured-220323.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/featured/featured-220323.zip
              - cloudformation-templates/lambda/featured/featured-220323.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaFoundation:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/foundation/foundation_layer-220323.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/foundation/foundation_layer-220323.zip
              - cloudformation-templates/lambda/foundation/foundation_layer-220323.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaAnalytics:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/analytics/analytics-220323.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/analytics/analytics-220323.zip
              - cloudformation-templates/lambda/analytics/analytics-220323.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaGetAnalytics:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/get_analytics/get_analytics-220323.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/get_analytics/get_analytics-220323.zip
              - cloudformation-templates/lambda/get_analytics/get_analytics-220323.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaAnnouncementsadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/announcements/announcement_add-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/announcements/announcement_add-230201.zip
              - cloudformation-templates/lambda/announcements/announcement_add-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaAnnouncementsdelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/announcements/announcement_delete-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/announcements/announcement_delete-230201.zip
              - cloudformation-templates/lambda/announcements/announcement_delete-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaAnnouncementsget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/announcements/announcement_get-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/announcements/announcement_get-230201.zip
              - cloudformation-templates/lambda/announcements/announcement_get-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaSavedrecordadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_record/saved_record-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_record/saved_record-230201.zip
              - cloudformation-templates/lambda/saved_record/saved_record-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaSavedrecordget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_record/get_saved_record-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_record/get_saved_record-230201.zip
              - cloudformation-templates/lambda/saved_record/get_saved_record-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaSavedrecorddelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_record/delete_saved_record-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_record/delete_saved_record-230201.zip
              - cloudformation-templates/lambda/saved_record/delete_saved_record-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaSavedsearchadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_search/saved_search-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_search/saved_search-230201.zip
              - cloudformation-templates/lambda/saved_search/saved_search-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaSavedsearchget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_search/get_saved_searches-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_search/get_saved_searches-230201.zip    
              - cloudformation-templates/lambda/saved_search/get_saved_searches-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaSavedsearchdelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/saved_search/delete_saved_search-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/saved_search/delete_saved_search-230201.zip
              - cloudformation-templates/lambda/saved_search/delete_saved_search-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityaddmember:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_add_member-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_add_member-230201.zip
              - cloudformation-templates/lambda/community/community_add_member-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaCommunityadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_add-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_add-230201.zip
              - cloudformation-templates/lambda/community/community_add-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaCommunityannouncementsadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_announcement_add-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_announcement_add-230201.zip
              - cloudformation-templates/lambda/community/community_announcement_add-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityannouncementsdelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_announcement_delete-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_announcement_delete-230201.zip
              - cloudformation-templates/lambda/community/community_announcement_delete-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityannouncementsedit:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_announcement_edit-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_announcement_edit-230201.zip
              - cloudformation-templates/lambda/community/community_announcement_edit-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityannouncementsget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_announcement_get-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_announcement_get-230201.zip
              - cloudformation-templates/lambda/community/community_announcement_get-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaCommunitydataadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_data_add-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_data_add-230201.zip
              - cloudformation-templates/lambda/community/community_data_add-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunitydatadelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_data_delete-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_data_delete-230201.zip
              - cloudformation-templates/lambda/community/community_data_delete-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunitydataget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_data_get-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_data_get-230201.zip
              - cloudformation-templates/lambda/community/community_data_get-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any
  
  LambdaCommunityresourcesadd:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_resource_add-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_resource_add-230201.zip
              - cloudformation-templates/lambda/community/community_resource_add-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityresourcesdelete:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_resource_delete-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_resource_delete-230201.zip
              - cloudformation-templates/lambda/community/community_resource_delete-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityresourcesedit:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_resource_edit-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_resource_edit-230201.zip
              - cloudformation-templates/lambda/community/community_resource_edit-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityresourcesget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_resource_get-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_resource_get-230201.zip
              - cloudformation-templates/lambda/community/community_resource_get-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunitydeletemember:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_delete_member-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_delete_member-230201.zip
              - cloudformation-templates/lambda/community/community_delete_member-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityeditmember:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_edit_member-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_edit_member-230201.zip
              - cloudformation-templates/lambda/community/community_edit_member-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityedit:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_edit-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_edit-230201.zip
              - cloudformation-templates/lambda/community/community_edit-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunitygetmembers:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_get_members-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_get_members-230201.zip
              - cloudformation-templates/lambda/community/community_get_members-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCommunityget:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/community_get-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/community_get-230201.zip
              - cloudformation-templates/lambda/community/community_get-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaMycommunityannouncements:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/my_community_announcements-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/my_community_announcements-230201.zip
              - cloudformation-templates/lambda/community/my_community_announcements-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaMycommunitydata:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/my_community_data-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/my_community_data-230201.zip
              - cloudformation-templates/lambda/community/my_community_data-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaMycommunityresources:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/community/my_community_resources-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/community/my_community_resources-230201.zip
              - cloudformation-templates/lambda/community/my_community_resources-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaTranslate:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs16.x
      # AutoPublishAlias: live
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/translate/translate-230201.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/translate/translate-230201.zip
              - cloudformation-templates/lambda/translate/translate-230201.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /*
            Method: any

  LambdaCollections:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key:
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/collections/collections-20240612-1600.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/collections/collections-20240612-1600.zip
              - cloudformation-templates/lambda/collections/collections-20240612-1600.zip
      MemorySize: 3009
      Handler: app.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          PARQUET_BUCKET_NAME: !Sub 's3://webpresence-geocore-geojson-to-parquet-${Environment}'
          MAX_CHILD_OR_SIBLING_LENGTH: 5000
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /collections
            Method: any
      Layers:
        - arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python39:8

  KeepCollectionsWarmScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: KeepCollectionsWarm
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - LambdaCollections
              - Arn
          Id: TargetFunctionV1
  
  PermissionToInvokeLambdaId:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref LambdaCollections
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 
        - KeepCollectionsWarmScheduleRule
        - Arn

  LambdaPopularity:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/geocore-filters/popularity-20230330-0800.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/geocore-filters/popularity-20230330-0800.zip
              - cloudformation-templates/lambda/geocore-filters/popularity-20230330-0800.zip
      MemorySize: 4096
      Handler: lambda_function.lambda_handler
      Timeout: 900
      Environment:
        Variables:
          DYNAMODB_TABLE: 'analytics_popularity'
          GEOJSON_BUCKET_NAME: !Sub 'webpresence-geocore-json-to-geojson-${Environment}'
          GEONETWORK_POPULARITY_PATH: ''
          PARQUET_BUCKET_NAME: !Sub 's3://webpresence-geocore-geojson-to-parquet-${Environment}/'
          REGION_NAME: 'ca-central-1'
      Layers:
        - arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python38:4

  LambdaViewerConfigService:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: 
          Fn::If:
            - IsProd
            - cloudformation-templates/lambda/viewer-config-service/viewer-config-service-20240924-1200.zip
            - Fn::If:
              - IsStage
              - cloudformation-templates/lambda/viewer-config-service/viewer-config-service-20240924-1200.zip
              - cloudformation-templates/lambda/viewer-config-service/viewer-config-service-20240924-1200.zip
      MemorySize: 3009
      Handler: app.lambda_handler
      Timeout: 15
      Environment:
        Variables:
          GCS_TABLE: 'geoview_config_service'
          GEOCORE_ID_API: 'https://geocore.api.geo.ca/id/v2'
          RCS_CONFIG_PATH: 'https://maps.canada.ca/geonetwork/srv/api/v2/docs/'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /vcs
            Method: any
      Layers:
        - arn:aws:lambda:ca-central-1:336392948345:layer:AWSSDKPandas-Python39:11

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  VerificationHeaderSecret: 
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Verification header secret value used to identify request coming from CloudFront to API Gateway
      Name: /webpresence/geocore/verification-header-secret
      GenerateSecretString: 
        ExcludePunctuation: true
        PasswordLength: 32

  OriginRequestPolicy: 
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties: 
      OriginRequestPolicyConfig: 
        CookiesConfig: 
          CookieBehavior: none 
        HeadersConfig: 
          HeaderBehavior: whitelist  
          Headers:
            - x-origin-verify
            - x-api-key
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
            - Origin
        Name: geocore-cloudfront-to-api-gateway
        QueryStringsConfig: 
          QueryStringBehavior: all

  GeocoreDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: VerificationHeaderSecret
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Origins:
        - Id: ApiOrigin
          DomainName: !Sub ${RestApi}.execute-api.${AWS::Region}.amazonaws.com
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only    
            OriginSSLProtocols: 
              - TLSv1.2  
          OriginPath: /live   
          OriginCustomHeaders:
            - HeaderName: X-Origin-Verify
              HeaderValue: '{{resolve:secretsmanager:/webpresence/geocore/verification-header-secret}}'   
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: ApiOrigin
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
          LambdaFunctionAssociations:
            - EventType: origin-response
              LambdaFunctionARN: !Ref SecHeadersLambdaEdgeArn
        HttpVersion: http2
        WebACLId: !Ref WebAclArn
        Logging:
          Bucket: !Sub 'webpresence-cloudfront-access-logs-${Environment}.s3.amazonaws.com'
          IncludeCookies: true
          Prefix: geocore
        Aliases:
          - !If 
            - IsProd
            - geocore.api.geo.ca
            - !Sub 'geocore-${Environment}.api.geo.ca'
          - !If 
            - IsProd
            - www.geocore.api.geo.ca
            - !Sub 'www.geocore-${Environment}.api.geo.ca'
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref SslCertArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021 

  RestApiWebAcl:
    Type: AWS::WAFv2::WebACL
    DependsOn: VerificationHeaderSecret
    Properties:
      Name: webpresence-geocore-cloudfront
      Scope: REGIONAL
      Description: "Restrict access to CloudFront"
      DefaultAction: 
        Block: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: webpresence-geocore-cloudfront    
      Rules: 
        - Name: webpresence-geocore-cloudfront-header-verification
          Priority: 0
          Action:
            Allow: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: webpresence-geocore-cloudfront-header-verification
          Statement:
            ByteMatchStatement:
              FieldToMatch:
                SingleHeader:
                  Name: X-Origin-Verify
              PositionalConstraint: EXACTLY
              SearchString: '{{resolve:secretsmanager:/webpresence/geocore/verification-header-secret}}'
              TextTransformations:
                - Priority: 0
                  Type: NONE

  RestApiWebAclAssociations:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: 
      - RestApiliveStage
    Properties: 
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/live"
      WebACLArn: !GetAtt RestApiWebAcl.Arn

  RestApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RestApiliveStage
    Properties: 
      Description: API key for "search" API Gateway
      Name: search
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: live

  RestApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApiliveStage    
    Properties: 
      ApiStages: 
        - ApiId: !Ref RestApi
          Stage: live
      Description: Usage plan for "search" API Gateway
      UsagePlanName: search  

  RestApiKeyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref RestApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RestApiKeyUsagePlan

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: search  
      AccessLogSetting:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: '<request id="$context.requestId"> <ip>$context.identity.sourceIp</ip> <caller>$context.identity.caller</caller> <user>$context.identity.user</user> <requestTime>$context.requestTime</requestTime> <httpMethod>$context.httpMethod</httpMethod> <resourcePath>$context.resourcePath</resourcePath> <status>$context.status</status> <protocol>$context.protocol</protocol> <responseLength>$context.responseLength</responseLength><errorMessage>$context.error.message</errorMessage></request>'
      EndpointConfiguration:
        Type: REGIONAL
      OpenApiVersion: "2.0"
      StageName: live
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "search"
        schemes:
        - "https"
        paths:
          /analytics:
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/1:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"1\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/10:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                  
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"10\",\r\n    \"uuid\" : \"$input.params('uuid')\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/2:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"2\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/3:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"3\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/4:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"4\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/5:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"5\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/6:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"6\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/7:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"7\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/8:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"                    
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"8\",\r\n    \"lang\" : \"$input.params('lang')\"\
                    ,\r\n    \"theme\" : \"$input.params('theme')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/9:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"                    
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"              
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"9\",\r\n    \"lang\" : \"$input.params('lang')\"\
                    ,\r\n    \"org\" : \"$input.params('org')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /analytics/11:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGetAnalytics}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n    \"id\" : \"11\",\r\n    \"theme\" : \"$input.params('theme')\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"                
          /announcements:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaAnnouncementsget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"lang\" : \"$input.params('lang')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /announcements/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaAnnouncementsadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /announcements/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaAnnouncementsdelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /collections:
                get:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  x-amazon-apigateway-integration:
                    uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCollections}/invocations"
                    httpMethod: "POST"
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\r\n    \"id\" : \"$input.params('id')\"\r\n}"
                    passthroughBehavior: "when_no_templates"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"
          /community/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/add_member:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityaddmember}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/announcements/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityannouncementsadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/announcements/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityannouncementsdelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/announcements/edit:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityannouncementsedit}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/announcements/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityannouncementsget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"communityId\" : \"$input.params('communityId')\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/data/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunitydataadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/data/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunitydatadelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/data/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunitydataget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"communityId\" : \"$input.params('communityId')\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/delete_member:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunitydeletemember}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/edit:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityedit}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/edit_member:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityeditmember}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"communityId\" : \"$input.params('communityId')\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/get_member:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunitygetmember}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"communityId\" : \"$input.params('communityId')\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/my_community/announcements:
              get:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaMycommunityannouncements}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/my_community/data:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaMycommunitydata}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"userId\" : \"$input.params('userId')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/my_community/resources:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaMycommunityresources}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"userId\" : \"$input.params('userId')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/resources/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityresourcesadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/resources/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityresourcesdelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/resources/edit:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityresourcesedit}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /community/resources/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaCommunityresourcesget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"communityId\" : \"$input.params('communityId')\"\
                      \r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /featured:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaFeatured}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"theme\" : \"$input.params('theme')\",\n    \"\
                      lang\" : \"$input.params('lang')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /foundational:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaFoundation}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"theme\" : \"$input.params('theme')\",\n    \"\
                      lang\" : \"$input.params('lang')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /geo:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaGeo}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"north\" : \"$input.params('north')\",\r\n\
                      \    \"east\" : \"$input.params('east')\",\r\n    \"south\" : \"$input.params('south')\"\
                      ,\r\n    \"west\" : \"$input.params('west')\",\r\n    \"keyword\" : \"\
                      $input.params('keyword')\",\r\n    \"keyword_only\" : \"$input.params('keyword_only')\"\
                      ,\r\n    \"lang\" : \"$input.params('lang')\",\r\n    \"theme\" : \"$input.params('theme')\"\
                      ,\r\n    \"type\": \"$input.params('type')\",\r\n    \"org\": \"$input.params('org')\"\
                      ,\r\n    \"min\": \"$input.params('min')\",\r\n    \"max\": \"$input.params('max')\"\
                      ,\r\n    \"foundational\": \"$input.params('foundational')\"
                      ,\r\n     \"sort\": \"$input.params('sort')\"
                      ,\r\n    \"source_system\": \"$input.params('sourcesystemname')\"
                      ,\r\n    \"eo_collection\": \"$input.params('eocollection')\"
                      ,\r\n    \"polarization\": \"$input.params('polarization')\"
                      ,\r\n    \"orbit_direction\": \"$input.params('orbit')\"}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /id:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaIdV1}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"lang\" : \"$input.params('lang')\",\r\n  \
                      \  \"id\" : \"$input.params('id')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /id/v1:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaIdV1}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"lang\" : \"$input.params('lang')\",\r\n  \
                      \  \"id\" : \"$input.params('id')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /id/v2:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaId}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"lang\" : \"$input.params('lang')\",\r\n  \
                      \  \"id\" : \"$input.params('id')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /vcs:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaViewerConfigService}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"method\" : \"GET\",\r\n  \
                      \  \"lang\" : \"$input.params('lang')\",\r\n  \
                      \  \"metadata\" : \"$input.params('metadata')\",\r\n  \
                      \  \"id\" : \"$input.params('id')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  type: "aws"
                  httpMethod: "POST"
                  uri: !Sub "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaViewerConfigService}/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: |
                      {
                        "method" : "POST",
                        "body" : "$util.base64Encode($input.body)"
                      }
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  type: "mock"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
          /saved_records/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedrecordadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /saved_records/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedrecorddelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /saved_records/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedrecordget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"userId\" : \"$input.params('userId')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /saved_searches/add:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedsearchadd}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /saved_searches/delete:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedsearchdelete}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /saved_searches/get:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaSavedsearchget}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"userId\" : \"$input.params('userId')\"\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /translate:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaTranslate}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\r\n    \"text\" : \"$input.params('text')\",\r\n  \
                      \  \"from_lang\" : \"$input.params('from_lang')\",\r\n    \"to_lang\"\
                      \ : \"$input.params('to_lang')\"\r\n}"
                  passthroughBehavior: "when_no_templates"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          /resourceindex:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - api_key: []
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:ca-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ca-central-1:${AWS::AccountId}:function:${LambdaResourceIndex}/invocations"
                  httpMethod: "POST"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: "when_no_match"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          
          
          securityDefinitions:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
          x-amazon-apigateway-gateway-responses:
            DEFAULT_4XX:
              responseParameters:
                gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            DEFAULT_5XX:
              responseParameters:
                gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"


  LogGroup:
    Type: Custom::LogGroup
    Properties:
      ServiceToken: !ImportValue LogGroupHelperLambdaArn
      LogGroupName: !Sub '/${Environment}/webpresence/geocore'
      RetentionInDays: 3653


